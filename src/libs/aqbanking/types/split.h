/* This file is auto-generated from "split.xml" by the typemaker
   tool of Gwenhywfar. 
   Do not edit this file -- all changes will be lost! */
#ifndef SPLIT_H
#define SPLIT_H

/** @page P_AB_SPLIT_PUBLIC AB_Split (public)
This page describes the properties of AB_SPLIT
This type contains all important information about transaction splits. Please note that all text fields are in UTF-8.
<h3>Local Account Info</h3>
<p>
This group contains information about the local account.
</p>
@anchor AB_SPLIT_LocalCountry
<h4>LocalCountry</h4>
<p>
This is the two-character country code according to ISO 3166-1 (Alpha-2). This is also used in DNS toplevel domain names. For Germany use &quot;DE&quot;. (FIXME: is this case-sensitive?)
</p>
<p>
Set this property with @ref AB_Split_SetLocalCountry, 
get it with @ref AB_Split_GetLocalCountry
</p>

@anchor AB_SPLIT_LocalBankCode
<h4>LocalBankCode</h4>
<p>
This is the code of the local bank (i.e.

<b>
your

</b>

bank).
</p>
<p>
Set this property with @ref AB_Split_SetLocalBankCode, 
get it with @ref AB_Split_GetLocalBankCode
</p>

@anchor AB_SPLIT_LocalBranchId
<h4>LocalBranchId</h4>
<p>
This is the branch id of the local bank (OFX only)
</p>
<p>
Set this property with @ref AB_Split_SetLocalBranchId, 
get it with @ref AB_Split_GetLocalBranchId
</p>

@anchor AB_SPLIT_LocalAccountNumber
<h4>LocalAccountNumber</h4>
<p>
</p>
<p>
Set this property with @ref AB_Split_SetLocalAccountNumber, 
get it with @ref AB_Split_GetLocalAccountNumber
</p>

@anchor AB_SPLIT_LocalSuffix
<h4>LocalSuffix</h4>
<p>
If your account has subaccounts which are distinguished by different suffixes, then this is that suffix. Otherwise it&apos;s empty. (HBCI only)
</p>
<p>
Set this property with @ref AB_Split_SetLocalSuffix, 
get it with @ref AB_Split_GetLocalSuffix
</p>

@anchor AB_SPLIT_LocalName
<h4>LocalName</h4>
<p>
</p>
<p>
Set this property with @ref AB_Split_SetLocalName, 
get it with @ref AB_Split_GetLocalName
</p>

<h3>Remote Account Info</h3>
<p>
This group contains information about the remote account.
</p>
@anchor AB_SPLIT_RemoteCountry
<h4>RemoteCountry</h4>
<p>
This is the two-character ISO country code (as used in toplevel domains). For Germany use &quot;DE&quot;.
</p>
<p>
Set this property with @ref AB_Split_SetRemoteCountry, 
get it with @ref AB_Split_GetRemoteCountry
</p>

@anchor AB_SPLIT_RemoteBankCode
<h4>RemoteBankCode</h4>
<p>
</p>
<p>
Set this property with @ref AB_Split_SetRemoteBankCode, 
get it with @ref AB_Split_GetRemoteBankCode
</p>

@anchor AB_SPLIT_RemoteBranchId
<h4>RemoteBranchId</h4>
<p>
This is the branch id of the remote bank (OFX only)
</p>
<p>
Set this property with @ref AB_Split_SetRemoteBranchId, 
get it with @ref AB_Split_GetRemoteBranchId
</p>

@anchor AB_SPLIT_RemoteAccountNumber
<h4>RemoteAccountNumber</h4>
<p>
</p>
<p>
Set this property with @ref AB_Split_SetRemoteAccountNumber, 
get it with @ref AB_Split_GetRemoteAccountNumber
</p>

@anchor AB_SPLIT_RemoteSuffix
<h4>RemoteSuffix</h4>
<p>
</p>
<p>
Set this property with @ref AB_Split_SetRemoteSuffix, 
get it with @ref AB_Split_GetRemoteSuffix
</p>

@anchor AB_SPLIT_RemoteName
<h4>RemoteName</h4>
<p>
</p>
<p>
Set this property with @ref AB_Split_SetRemoteName, 
get it with @ref AB_Split_GetRemoteName
</p>

<h3>Value</h3>
<p>
</p>
@anchor AB_SPLIT_Value
<h4>Value</h4>
<p>
</p>
<p>
Set this property with @ref AB_Split_SetValue, 
get it with @ref AB_Split_GetValue
</p>

@anchor AB_SPLIT_Purpose
<h3>Purpose</h3>
<p>
<p>
This string list contains the purpose of the split. Every entry of this list represents a single purpose line.

</p>
</p>
<p>
Set this property with @ref AB_Split_SetPurpose, 
get it with @ref AB_Split_GetPurpose
</p>

*/
#include <gwenhywfar/db.h>
#include <gwenhywfar/inherit.h>
#include <gwenhywfar/misc.h>
#include <gwenhywfar/list2.h>
#include <gwenhywfar/types.h>
#include <gwenhywfar/gwentime.h>
#include <gwenhywfar/stringlist.h>
#include <aqbanking/value.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct AB_SPLIT AB_SPLIT;

GWEN_INHERIT_FUNCTION_LIB_DEFS(AB_SPLIT, AQBANKING_API)
GWEN_LIST_FUNCTION_LIB_DEFS(AB_SPLIT, AB_Split, AQBANKING_API)
AB_SPLIT_LIST *AB_Split_List_dup(const AB_SPLIT_LIST *stl);

GWEN_LIST2_FUNCTION_LIB_DEFS(AB_SPLIT, AB_Split, AQBANKING_API)

/** Destroys all objects stored in the given LIST2 and the list itself
*/
AQBANKING_API void AB_Split_List2_freeAll(AB_SPLIT_LIST2 *stl);
/** Creates a deep copy of the given LIST2.
*/
AQBANKING_API AB_SPLIT_LIST2 *AB_Split_List2_dup(const AB_SPLIT_LIST2 *stl);

/** Creates a new object.
*/
AQBANKING_API AB_SPLIT *AB_Split_new();
/** Destroys the given object.
*/
AQBANKING_API void AB_Split_free(AB_SPLIT *st);
/** Increments the usage counter of the given object, so an additional free() is needed to destroy the object.
*/
AQBANKING_API void AB_Split_Attach(AB_SPLIT *st);
/** Creates and returns a deep copy of thegiven object.
*/
AQBANKING_API AB_SPLIT *AB_Split_dup(const AB_SPLIT*st);
/** Creates an object from the data in the given GWEN_DB_NODE
*/
AQBANKING_API AB_SPLIT *AB_Split_fromDb(GWEN_DB_NODE *db);
/** Stores an object in the given GWEN_DB_NODE
*/
AQBANKING_API int AB_Split_toDb(const AB_SPLIT*st, GWEN_DB_NODE *db);
/** Returns 0 if this object has not been modified, !=0 otherwise
*/
AQBANKING_API int AB_Split_IsModified(const AB_SPLIT *st);
/** Sets the modified state of the given object
*/
AQBANKING_API void AB_Split_SetModified(AB_SPLIT *st, int i);


/** @name Local Account Info
 *
This group contains information about the local account.
*/
/*@{*/

/**
* Returns the property @ref AB_SPLIT_LocalCountry
*/
AQBANKING_API const char *AB_Split_GetLocalCountry(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_LocalCountry
*/
AQBANKING_API void AB_Split_SetLocalCountry(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_LocalBankCode
*/
AQBANKING_API const char *AB_Split_GetLocalBankCode(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_LocalBankCode
*/
AQBANKING_API void AB_Split_SetLocalBankCode(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_LocalBranchId
*/
AQBANKING_API const char *AB_Split_GetLocalBranchId(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_LocalBranchId
*/
AQBANKING_API void AB_Split_SetLocalBranchId(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_LocalAccountNumber
*/
AQBANKING_API const char *AB_Split_GetLocalAccountNumber(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_LocalAccountNumber
*/
AQBANKING_API void AB_Split_SetLocalAccountNumber(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_LocalSuffix
*/
AQBANKING_API const char *AB_Split_GetLocalSuffix(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_LocalSuffix
*/
AQBANKING_API void AB_Split_SetLocalSuffix(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_LocalName
*/
AQBANKING_API const char *AB_Split_GetLocalName(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_LocalName
*/
AQBANKING_API void AB_Split_SetLocalName(AB_SPLIT *el, const char *d);

/*@}*/

/** @name Remote Account Info
 *
This group contains information about the remote account.
*/
/*@{*/

/**
* Returns the property @ref AB_SPLIT_RemoteCountry
*/
AQBANKING_API const char *AB_Split_GetRemoteCountry(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_RemoteCountry
*/
AQBANKING_API void AB_Split_SetRemoteCountry(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_RemoteBankCode
*/
AQBANKING_API const char *AB_Split_GetRemoteBankCode(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_RemoteBankCode
*/
AQBANKING_API void AB_Split_SetRemoteBankCode(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_RemoteBranchId
*/
AQBANKING_API const char *AB_Split_GetRemoteBranchId(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_RemoteBranchId
*/
AQBANKING_API void AB_Split_SetRemoteBranchId(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_RemoteAccountNumber
*/
AQBANKING_API const char *AB_Split_GetRemoteAccountNumber(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_RemoteAccountNumber
*/
AQBANKING_API void AB_Split_SetRemoteAccountNumber(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_RemoteSuffix
*/
AQBANKING_API const char *AB_Split_GetRemoteSuffix(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_RemoteSuffix
*/
AQBANKING_API void AB_Split_SetRemoteSuffix(AB_SPLIT *el, const char *d);

/**
* Returns the property @ref AB_SPLIT_RemoteName
*/
AQBANKING_API const GWEN_STRINGLIST *AB_Split_GetRemoteName(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_RemoteName
*/
AQBANKING_API void AB_Split_SetRemoteName(AB_SPLIT *el, const GWEN_STRINGLIST *d);
AQBANKING_API void AB_Split_AddRemoteName(AB_SPLIT *st, const char *d, int chk);
AQBANKING_API void AB_Split_RemoveRemoteName(AB_SPLIT *st, const char *d);
AQBANKING_API void AB_Split_ClearRemoteName(AB_SPLIT *st);
AQBANKING_API int AB_Split_HasRemoteName(AB_SPLIT *st, const char *d);

/*@}*/

/** @name Value
*/
/*@{*/
/**
* Returns the property @ref AB_SPLIT_Value
*/
AQBANKING_API const AB_VALUE *AB_Split_GetValue(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_Value
*/
AQBANKING_API void AB_Split_SetValue(AB_SPLIT *el, const AB_VALUE *d);

/*@}*/

/**
* Returns the property @ref AB_SPLIT_Purpose
*/
AQBANKING_API const GWEN_STRINGLIST *AB_Split_GetPurpose(const AB_SPLIT *el);
/**
* Set the property @ref AB_SPLIT_Purpose
*/
AQBANKING_API void AB_Split_SetPurpose(AB_SPLIT *el, const GWEN_STRINGLIST *d);
AQBANKING_API void AB_Split_AddPurpose(AB_SPLIT *st, const char *d, int chk);
AQBANKING_API void AB_Split_RemovePurpose(AB_SPLIT *st, const char *d);
AQBANKING_API void AB_Split_ClearPurpose(AB_SPLIT *st);
AQBANKING_API int AB_Split_HasPurpose(AB_SPLIT *st, const char *d);


#ifdef __cplusplus
} /* __cplusplus */
#endif


#endif /* SPLIT_H */
